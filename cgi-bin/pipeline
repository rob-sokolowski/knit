#!/bin/bash -e

set -o pipefail

IFS=/ read -r empty pipeline_id sub_action <<< "$PATH_INFO"

if [[ $sub_action == result ]]; then
    result_id=$(./kgit cat-file blob $pipeline_id | tail -n1 | cut -d' ' -f2)
    echo Content-Type: text/html
    echo
    if [[ $(./kgit cat-file -s $result_id) -gt 1000000 ]]; then
        echo "<a href=\"/cgi-bin/cas/html/$result_id\">load</a>"
    else
        ./kgit cat-file blob $result_id
    fi
    exit
elif [[ $sub_action == env-run ]]; then
    sid=$(./kgit cat-file blob $pipeline_id | ./pipeline-to-session)
    (
        cd gen/session/$sid
        target="$(python3 ../../../cgi-bin/form_to_env.py)"
        pipeline_id=$(./run-pipeline "$target")
        bash ../../../cgi-bin/redirect.sh /cgi-bin/pipeline/$pipeline_id
    )
    rm -rf "gen/session/$sid"
    exit
fi

echo Content-Type: text/html
echo

echo '<html><body>'

echo "<iframe src=\"$SCRIPT_NAME$PATH_INFO/result\" style=\"width: 100%; height: 65%; border: 1px solid black\"></iframe>"

echo '<form method=post action="/cgi-bin/new-session">'
echo "<input type=hidden name=pipeline_id value=$pipeline_id>"
echo '<input type=submit value=edit></form>'

./kgit cat-file blob $pipeline_id | while read input_id resource_id resource; do
    echo "<p><a href=\"/cgi-bin/review/$pipeline_id/$resource\">$resource</a>"
    if [[ $input_id != 0000000000000000000000000000000000000000 ]]; then
        echo " [<a href=\"/cgi-bin/cas/text/$input_id\">source</a>]"
    fi
    if [[ $resource =~ \.job$ ]]; then
        ./kgit cat-file blob $resource_id | while IFS== read key value; do
            if [[ $key =~ ^input_ ]]; then
                echo "<br><a href=\"/cgi-bin/cas/text/$value\">$key</a>"
            fi
        done
    fi
    num_comments=$(ls "gen/comment/$pipeline_id/$resource" 2> /dev/null | wc -l || true)
    if [[ $num_comments -gt 0 ]]; then
        echo " ($num_comments comments)"
    fi
done

echo '</body></html>'
