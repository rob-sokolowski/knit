#!/usr/bin/python3

# should canonicalize, e.g., sort

import subprocess
import sys

_, unit = sys.argv
print(f'_source=unit:{unit}')

lines = subprocess.run(f'cpp -P -I. -nostdinc {unit}', shell=True, check=True,
                       stdout=subprocess.PIPE).stdout.decode('ascii').splitlines()
replacements = {}
for line in lines:
    if line.startswith('.replace '):
        # not safe with space in filenames
        _, old, new = line.split(' ')
        replacements[old] = new
        continue
    key, value = line.rstrip().split('=', 1)
    if key.startswith('input_'):
        # recursive replacement doesn't seem to make sense
        value = replacements.get(value, value)
        input_type, input_path = value.split(':', 1)
        if input_type == 'file':
            inputid = subprocess.run(['./file-to-tree', input_path], check=True,
                                     stdout=subprocess.PIPE).stdout.strip().decode('ascii')
        elif input_type == 'unit':
            tree = subprocess.Popen(['./unit-to-tree', input_path], stdout=subprocess.PIPE)
            treeid = subprocess.Popen(['./kgit', 'hash-object', '-w', '--stdin'],
                                     stdin=tree.stdout, stdout=subprocess.PIPE)
            assert treeid.wait() == 0
            assert tree.wait() == 0
            inputid = treeid.communicate()[0].strip().decode('ascii')
        else:
            assert input_type == 'param'
            raise Exception('missing param', input_path)
        assert len(inputid) == 40 and int(inputid, 16)
        print(f'{key}=tree:{inputid}')
    else:
        print(f'{key}={value}')
